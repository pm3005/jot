import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

interface RequestBody {
  action: 'rewrite' | 'format' | 'generate'
  text: string
  mood?: string
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { action, text, mood }: RequestBody = await req.json()

    if (!action || !text) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters: action and text' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Construct the prompt based on the action
    let prompt = ''
    
    switch (action) {
      case 'rewrite':
        prompt = `Please rewrite the following text in a ${mood || 'professional'} style. Keep the core meaning but adjust the tone and style accordingly. Only return the rewritten text without any additional commentary:

${text}`
        break
        
      case 'format':
        prompt = `Please format and improve the following text by fixing grammar, spelling, punctuation, and structure. Make it more readable and well-organized. Only return the formatted text without any additional commentary:

${text}`
        break
        
      case 'generate':
        prompt = `Based on the following context, please generate a continuation or expansion of the content. Keep the same style and tone. Only return the generated text without any additional commentary:

${text}`
        break
        
      default:
        return new Response(
          JSON.stringify({ error: 'Invalid action. Must be rewrite, format, or generate' }),
          { 
            status: 400, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        )
    }

    // Make request to Gemini API
    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyBAWdEq-wxebGYpaCNs2dm9IpUS5Bk4R6Y`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: action === 'generate' ? 0.7 : 0.3,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
          safetySettings: [
            {
              category: 'HARM_CATEGORY_HARASSMENT',
              threshold: 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              category: 'HARM_CATEGORY_HATE_SPEECH',
              threshold: 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
              threshold: 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
              threshold: 'BLOCK_MEDIUM_AND_ABOVE'
            }
          ]
        })
      }
    )

    if (!geminiResponse.ok) {
      const errorData = await geminiResponse.text()
      console.error('Gemini API error:', errorData)
      return new Response(
        JSON.stringify({ error: 'Failed to process request with Gemini API' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    const geminiData = await geminiResponse.json()
    
    // Extract the generated text from Gemini's response
    const result = geminiData.candidates?.[0]?.content?.parts?.[0]?.text

    if (!result) {
      return new Response(
        JSON.stringify({ error: 'No content generated by Gemini API' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    return new Response(
      JSON.stringify({ result: result.trim() }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error in ai-assistant function:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})